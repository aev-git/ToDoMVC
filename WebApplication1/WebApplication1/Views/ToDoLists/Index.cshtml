@model IEnumerable<ToDoListWeb.Models.ToDoList>

@{
	ViewData["Title"] = "Index";
}
<div class="pull-right">
	<button class="btn btn-success" data-bind="click: addList">Add New List</button>
</div>
<h2>Index</h2>

<div class="row">
	<!-- ko foreach: lists -->
	<div class="col-md-4">
		<div class="panel panel-default">
			<div class="panel-heading">
				<h2 class="panel-title" data-bind="text: name"></h2>
			</div>
			<div class="panel-body">
				<table class="table table-condensed">

					<tbody data-bind="foreach: items">
						<tr>
							<td style="width: 20px;">
								<input type="checkbox" data-bind="checked: isDone" />
							</td>
							<td data-bind="css: {completed: isDone}">
								<div data-bind="text:memo, visible:!showTextbox(), click:toggleEditMode"></div>
								<input class="form-control" data-bind="value:memo, visible: showTextbox, event:{blur: editModeOff}" />
							</td>
						</tr>
					</tbody>
					<tfoot>
						<tr>
							<td colspan="2">
								<button data-bind="click: addItem">Add</button>
							</td>
						</tr>
					</tfoot>
				</table>
			</div>
		</div>
	</div>
	<!-- /ko -->
</div>
@section Scripts
	{
	<script type="text/javascript">
        function TodoItem(host, id) {
            this.host = host;
            this.todoListId = host.id;
            this.id = id;
            this.isEditMode = ko.observable(false);
            this.toggleEditMode = function() {
                this.isEditMode(!this.isEditMode());
            };
            this.memo = ko.observable();
            this.isDone = ko.observable();
			var self = this;

            this.isDone.subscribe(function(value) {
                self.isDone(value);
                self.host.postData(self);
            });
            this.memo.subscribe(function(value) {
                self.memo(value);
                self.host.postData(self);
                self.editModeOff();
            });
            this.editModeOff = function() {
                self.isEditMode(false);
			};
			this.showTextbox = ko.pureComputed(function() {
				return self.isEditMode() || self.memo() == undefined || self.memo() === "";
			});

        }

        function TodoList(host, id) {
            this.host = host;
            this.id = id;
            this.name = ko.observable();
            this.items = ko.observableArray([]);
            this.addItem = function() {
                this.items.push(new TodoItem(this, 0));
            };
            this.postData = function(item) {
                if (this.host.ignore)
                    return;

                var self = this;
                $.ajax({
                    type: "post",
                    dataType: "JSON",
                    url: '@Url.Action("Save", "TodoItems")',
                    data: {
                        id: item.id,
                        todoListId: self.id,
                        memo: item.memo(),
                        isDone: item.isDone()
                    },
                    success: function(response) {
                        self.id = response;
                    }
                });
            };

        }

        function ViewModel() {
            var self = this;
            this.ignore = true;
            this.lists = ko.observableArray([]);
            this.addList = function() {
                var name = prompt("Enter a name for the list: ");
                if (name.length === 0)
                    return;

                var newList = new TodoList(this, 0);
                newList.name(name);
                this.postData(newList);
                this.lists.push(newList);
            };
            this.postData = function(list) {
                if (list.host.ignore)
                    return;

                $.ajax({
                    type: "post",
                    dataType: "JSON",
                    url: '@Url.Action("Save", "TodoLists")',
                    data: {
                        id: list.id,
                        name: list.name()
                    },
                    success: function(response) {
                        list.id = response;
                    }
                });
            };
            @foreach (var list in Model)
            {
                @:var list = new TodoList(self, @list.Id);
                @:list.name('@list.Name');
                foreach (var item in list.ToDoItems)
                {
                    @:var item = new TodoItem(list, @item.Id);
                    @:item.todoListId = @item.ToDoListId;
                    @:item.memo('@item.Memo');
                    @:item.isDone(@item.IsDone.ToString().ToLower());

                    @:list.items.push(item);


                }
                @:this.lists.push(list);
            }
            this.ignore = false;
        }

        ko.applyBindings(new ViewModel());
	</script>
}
